components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre de la persona a registrar
        last_name:
          type: string
          description: Apellido de la persona a registrar
        email:
          type: string
          description: Email de la persona a registrar
        password:
          type: string
          description: Contraseña de la persona a registrar
        age:
          type: number
          description: Edad de la persona a registrar
        role:
          type: string
          description: Rol de la persona a registrar
        avatar:
          type: string
          description: Imagen de la persona a registrar
      example:
        first_name: Martin
        last_name: Gomez
        email: coder@coder.com
        password: 1234
        age: 18
        role: user
        avatar: "https://e7.pngegg.com/pngimages/223/244/png-clipart-computer-icons-avatar-user-profile-avatar-heroes-rectangle.png"
  responses:
    res200:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de la lectura de un usuario
      example:
        message: USER READ
        response:
          _id: 6707e8bfe09f2ba0821987cd
          first_name: Martin
          last_name: Gomez
          email: coder@coder.com
          password: 1234
          age: 18
          role: user
          avatar: "https://e7.pngegg.com/pngimages/223/244/png-clipart-computer-icons-avatar-user-profile-avatar-heroes-rectangle.png"
    res200s:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de la lectura de usuarios
      example:
        message: USERS READ
        response:
          - _id: 6707e8bfe09f2ba0821987cd
            first_name: Martin
            last_name: Gomez
            email: coder@coder.com
            password: 1234
            age: 18
            role: user
            avatar: "https://e7.pngegg.com/pngimages/223/244/png-clipart-computer-icons-avatar-user-profile-avatar-heroes-rectangle.png"
          - _id: 6707e8bfe09f2ba0821987cd
            first_name: Martin
            last_name: Gomez
            email: coder@coder.com
            password: 1234
            age: 18
            role: user
            avatar: "https://e7.pngegg.com/pngimages/223/244/png-clipart-computer-icons-avatar-user-profile-avatar-heroes-rectangle.png"
    res201:
      type: object
      properties:
        response:
          _id:
            type: string
            description: ID generado automaticamente por MONGO
          name:
            type: string
            description: Nombre de la persona a registrar
          email:
            type: string
            description: Email de la persona a registrar
          pasword:
            type: string
            description: Contraseña para el inicio de sesión de un usuario
          age:
            type: number
            description: Edad de la persona a registrar
          role:
            type: number
            description: Rol que habilita ciertos permisos
          avatar:
            type: string
            description: Imagen de la persona a registrar
          message:
            type: string
            description:
      example:
        response:
          _id: 6707e8bfe09f2ba0821987cd
          first_name: Martin
          last_name: Gomez
          email: coder@coder.com
          password: 1234
          age: 18
          role: user
          avatar: "https://e7.pngegg.com/pngimages/223/244/png-clipart-computer-icons-avatar-user-profile-avatar-heroes-rectangle.png"
        message: USER CREATED
    res201s:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo con la cantidad de usuarios creados
      example:
        message: 10 MOCK USERS CREATED
    res404:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de que no encontró el recurso solicitado
        statusCode:
          type: number
          description: Numero del codigo de estado de la operación
      example:
        message: Not found
        statusCode: 404
    res500:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de que el servidor no está respondiendo
        statusCode:
          type: number
          description: Numero del codigo de estado de la operación
      example:
        message: Server Error
        statusCode: 500
paths:
  /api/users:
    post:
      summary: Ruta para resistrar un usuario
      tags:
        - User
      requestBody:
        required: true
        content:
          application/jason:
            schema:
              $ref: '#components/schema/User'
      responses:
        '201':
          descrption: Respuesta de exito en la creación
          content:
            application/json:
              schema:
                $ref: '#components/responses/res201'
        '500':
          description: Respuesta fallida de la creación
          content:
            application/json:
              schema:
                $ref: '#components/responses/res500'
    get:
      summary: Ruta para leer usuarios
      tags:
        - User
      responses:
        '200':
          description: Respuesta de exito en la lectura de usuarios
          content:
            application/json:
              schema:
                $ref: '#components/responses/res200s'
        '404':
          description: Respuesta informativa cuando no encuentra usuarios
          content:
            application/json:
              schema:
                $ref: '#components/responses/res404'
        '500':
          description: Respuesta fallida en la lectura de usuarios
          content:
            application/json:
              schema:
                $ref: '#components/responses/res500'
  /api/users/{uid}:
    get:
      summary: Ruta para leer un usuario
      tags:
        - User
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario a leer
      responses:
        '200':
          description: Respuesta de exito en la lectura de un usuario con el ID correspondiente
          content:
            application/json:
              schema:
                $ref: '#components/responses/res200'
        '404':
          description: Respuesta informativa cuando no encuentra el usuario con el ID correspondiente
          content:
            application/json:
              schema:
                $ref: '#components/responses/res404'
        '500':
          description: Respuesta fallida en la lectura de usuarios
          content:
            application/json:
              schema:
                $ref: '#components/responses/res500'
